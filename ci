#!/usr/bin/php
<?php

abstract class Base {

	protected $_docroot	= null;
	static $_cfg		= null;
	protected $_actions	= array(
		'create','modify','generate'
	);
	protected $_types	= array(
		'model','controller','library','project','models'
	);

	function __construct(){
		$this->_docroot=__DIR__;
	}
	public function parseArgs($args){
		foreach($args as $k=>$a){
			preg_match('/--([a-z]+)=(.+)/',$a,$m);
			if(isset($m[1]) && isset($m[2])){
				unset($args[$k]);
				$args[$m[1]]=$m[2];
			}
		}
		return $args;
	}
	//---------------------
	//-----------------
	public function _add($in){
		// Be sure we have a type and name.
		$in=$this->parseArgs($in);
		
		if(isset($in['type']) && isset($in['name'])){
			$func='add_'.strtolower($in['type']);
			if(method_exists($this,$func)){
				$this->$func($in);
			}else{ throw new Exception('Type not supported!'); }
		}else{ throw new Exception('Required fields [type,name] not set!'); }
	}
	
	/**
	 * Generic method to dynamically add methods to a class
	 * Uses Reflection to determine the right place to put it...
	 */
	public function add_method($in){
		$path=Config::get('DEF_PATH');
		$lib_name=ucwords(strtolower($in[3]));
		$lib=$lib_name.'.php';
		
		// If we don't have a path, use the local one
		if($path===null){ $path=getcwd(); }
		$p=$path.'/system/application/library/'.$lib;
		
		// See if the file exists and if it can be written too...
		if(is_file($p)){
			if(is_writable($p)){
				//Excellent! Lets find the location of the end of the last method!
				
				include_once($p);
				$ref=new ReflectionClass($lib_name);
				
				// Be sure it's not already there
				if($ref->hasMethod($in['name'])){
					throw new Exception('Method already defined!');
				}
				
				$meth=$ref->getMethods();
				$last_line=$meth[count($meth)-1]->getEndLine();
				
				$out['content']=str_replace(
					array('[DEF_METHOD_NAME]'),
					array($in['name']),
					Config::get('DEF_METHOD'));
				
				// Now, lets insert something in there
				$lines	= file($p);
				$before	= array_splice($lines,0,$last_line);
				$all	= array_merge($before,$out,$lines);
				
				// Write it out!
				file_put_contents($p,implode("",$all));
				
			}else{ throw new Exception('Invalid permissions! ('.$p.')'); }
		}else{ throw new Exception('Library file not found! ('.$p.')'); }
	}
	
}
//-------------------
class Cli extends Base {
	
	/* TODO: load in a default configuration */
	private $_cobj	= null;
	
	function __construct(){
		parent::__construct();
		$this->_cobj=new Config();
		parent::$_cfg=Config::load();
		
		//var_dump(parent::$_cfg);
	}
	public function handle(){
		if(count($_SERVER['argv'])>2){
			// we have sometrhng to do!
			
			// normalize
			$action=strtolower($_SERVER['argv'][1]);
			$target=strtolower($_SERVER['argv'][2]);
			
			// Be sure that we've given an allowed action
			if(!in_array($action,$this->_actions)){
				throw new Exception('Invalid action type "'.$action.'"');
			}
			// ...and an allowed target type
			if(!in_array($target,$this->_types)){
				throw new Exception('Invalid action type "'.$target.'"');
			}
			
			$class=ucwords($target);
			if(class_exists($class)){
				$obj=new $class();
				$obj->$action($this,$_SERVER['argv']);
			}
		}else{
			//Display the help message
			echo "Usage: ci [action] [type] [additional values]\n";
			
			if(isset($_SERVER['argv'][1]) && $_SERVER['argv'][1]=='--help'){
				echo "Actions:\t".implode(', ',$this->_actions)."\n";
				echo "Types:\t".implode(', ',$this->_types)."\n";
			};
		}
		echo "\n";
	}
	public function writeToFile($type,$name,$content){
		$path=Config::get('DEF_PATH');
		$type=ucwords(strtolower($type));
		
		// If we don't have a path, use the local one
		if($path===null){ $path=getcwd(); }
		$p=$path.'/system/application/'.strtolower($type);
		$f=$p.'/'.$name.'.php';

		if(!is_file($f)){
			if(is_writable($p)){ 
				//Write out the file
				file_put_contents($f,$content); 
			}else{ 
				throw new Exception('Cannot write to file! ('.$f.')'); 
			}
		}else{ throw new Exception($type.' '.$name.'.php already exists! ('.$f.')'); }
	}
}
class Config extends Base {
	
	static $_defaults=array(
		'DEF_CONSTRUCT'			=> "\tfunction __construct(){\n \t\tparent::[DEF_CONSTRUCT_TYPE]();\n\t }",
		'DEF_MODEL_CLASS'		=> "<?php\n class [DEF_MODEL_NAME] extends Model {\n [DEF_CONTENT] \n} \n?>",
		'DEF_CONTROLLER_CLASS'	=> "<?php\n class [DEF_CONTROLLER_NAME] extends Controller {\n [DEF_CONTENT] \n} \n?>",
		'DEF_LIBRARY_CLASS'		=> "<?php\n class [DEF_LIBRARY_NAME] {\n [DEF_CONTENT] \n} \n?>",
		'DEF_METHOD'			=> "\tpublic function [DEF_METHOD_NAME](\$arg){\n\t\n\t}\n",
		'DEF_PATH'				=> null
	);
	
	/* By default, we're going to look for the config 
		in the current directory */
	static $_cfg_file	= '	ci_config.ini';
	static $_cfg_path	= null;
	static $_root		= null;
	
	function __construct(){
		parent::__construct();
		self::$_root=__DIR__;
	}
	static function load(){
		// First, push our defaults into the array
		$def = self::$_defaults;
		$p	 = self::$_root.'/'.trim(self::$_cfg_file);
		
		// If we have a file, override our current settings
		if(is_file($p)){
			$ini=parse_ini_file($p,true);
			foreach($ini['defaults'] as $k=>$v){
				$def[$k]=$v;
			}
		}
		return $def;
	}
	static function get($key){
		return self::$_cfg[$key];
	}
	
}
################################
class Model extends Base {

	function __construct(){
		parent::__construct();
	}
	public function create($obj,$in){
		//According to CodeIgniter standards, the model must have first letter capitalized
		$name=ucwords(strtolower($in[3]));
		
		// define some defaults
		$content=str_replace(
			array('[DEF_CONSTRUCT_TYPE]'),
			array('__construct'),
			Config::get('DEF_CONSTRUCT'));
			
		$result=str_replace(
			array('[DEF_CONTENT]','[DEF_MODEL_NAME]'),
			array($content,$name),
			Config::get('DEF_MODEL_CLASS'));
			
		$obj->writeToFile('library',$name,$result);
		
	}
	public function modify($obj,$in){
		if(method_exists($this,'_'.$in[4])){
			$this->{'_'.$in[4]}($in);
		}else{
			throw new Exception('Action not defined! ('.$in[4].')'); 
		}
	}
	public function generate($obj,$in){
		$in=$this->parseArgs($in);
		print_r($in);
		//See if they just want all of them created
		if(isset($in[3]) && strtolower($in[3])=='all'){
			
			//Connect to the database using the options in config.php
			$path=Config::get('DEF_PATH');
			echo 'p:'.$path;
			
			// If we don't have a path, use the local one
			if($path===null){ $path=getcwd(); }
			$p=$path.'/system/application/config';
			echo $p;
			if(is_file($p.'/database.php')){
				//Cheat to let CI let us into the config file
				// NOTE: this will only work for MySQL right now...[default]
				define('BASEPATH',true);
				include_once($p.'/database.php');
				print_r($db);
				
				//@TODO
				
			}else{ throw new Exception('Cannot load config file!'); }
			
		}else{
			//Not sure what to do here yet...
		}
	}
}
//-------------------
class Controller extends Base {
	
	function __construct(){
		parent::__construct();
	}
	//-----------------
	public function create($obj,$in){
		//According to CodeIgniter standards, the model must have first letter capitalized
		$name=ucwords(strtolower($in[3]));
		
		// define some defaults
		$content=str_replace(
			array('[DEF_CONSTRUCT_TYPE]'),
			array('__construct'),
			Config::get('DEF_CONSTRUCT'));
			
		$result=str_replace(
			array('[DEF_CONTENT]','[DEF_LIBRARY_NAME]'),
			array($content,$name),
			Config::get('DEF_CONTROLLER_CLASS'));
			
		$obj->writeToFile('library',$name,$result);
	}
	public function modify($obj,$in){
		if(method_exists($this,'_'.$in[4])){
			$this->{'_'.$in[4]}($in);
		}else{
			throw new Exception('Action not defined! ('.$in[4].')'); 
		}
	}
}
//-------------------
class Library extends Base {
	
	function __construct(){
		parent::__construct();
	}
	//-----------------
	public function create($obj,$in){
		//According to CodeIgniter standards, the model must have first letter capitalized
		$name=ucwords(strtolower($in[3]));
		
		// define some defaults
		$content=str_replace(
			array('[DEF_CONSTRUCT_TYPE]'),
			array('__construct'),
			Config::get('DEF_CONSTRUCT'));
		$result=str_replace(
			array('[DEF_CONTENT]','[DEF_LIBRARY_NAME]'),
			array($content,$name),
			Config::get('DEF_LIBRARY_CLASS'));
		
		$obj->writeToFile('library',$name,$result);
	}
	public function modify($obj,$in){
		if(method_exists($this,'_'.$in[4])){
			$this->{'_'.$in[4]}($in);
		}else{
			throw new Exception('Action not defined! ('.$in[4].')'); 
		}
	}
}
################################

$cli=new Cli();
try{ $cli->handle(); }catch(Exception $e){ echo 'ERROR: '.$e->getMessage()."\n"; }

?>
